using System.Linq; using Abp.Authorization.Users; using Enterprises.CMS.Authorization.Roles; using Enterprises.CMS.EntityFramework; using Enterprises.CMS.MultiTenancy; using Enterprises.CMS.Users; using Abp.Authorization; using Enterprise.CMS.Authorization; using Abp.MultiTenancy; using Abp.Authorization.Roles;  namespace Enterprises.CMS.Migrations.SeedData {     public class DefaultTenantRoleAndUserBuilder     {         private readonly CMSDbContext _context;          public DefaultTenantRoleAndUserBuilder(CMSDbContext context)         {             _context = context;         }          public void Build()         {             CreateUserAndRoles();         }          private void CreateUserAndRoles()         {             var adminRoleForTenancyOwner = _context.Roles.FirstOrDefault(r => r.TenantId == null && r.Name == "Admin");             if (adminRoleForTenancyOwner == null)             {                 adminRoleForTenancyOwner = _context.Roles.Add(new Role { Name = "Admin", DisplayName = "Admin" });                 _context.SaveChanges();             }              //Admin user for tenancy owner              var adminUserForTenancyOwner = _context.Users.FirstOrDefault(u => u.TenantId == null && u.UserName == "admin");             if (adminUserForTenancyOwner == null)             {                 adminUserForTenancyOwner = _context.Users.Add(                     new User                     {                         TenantId = null,                         UserName = "admin",                         Name = "System",                         Surname = "Administrator",                         EmailAddress = "yao-lifeng@163.com",                         IsEmailConfirmed = true,                         Mobile = "13606806123",                         IsMobileConfirmed = true,                         Password = "AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==" //123qwe                     });                    _context.SaveChanges();                  _context.UserRoles.Add(new UserRole(adminUserForTenancyOwner.Id, adminRoleForTenancyOwner.Id));                  _context.SaveChanges();             }              //Default tenant              var defaultTenant = _context.Tenants.FirstOrDefault(t => t.TenancyName == "Default");             if (defaultTenant == null)             {                 defaultTenant = _context.Tenants.Add(new Tenant { TenancyName = "Default", Name = "Default" });                 _context.SaveChanges();             }              //Admin role for 'Default' tenant             //var adminRoleForDefaultTenant = _context.Roles.FirstOrDefault(r => r.TenantId == defaultTenant.Id && r.Name == "Admin");             //if (adminRoleForDefaultTenant == null)             //{             //    adminRoleForDefaultTenant = _context.Roles.Add(new Role { TenantId = defaultTenant.Id, Name = "Admin", DisplayName = "Admin" });             //    _context.SaveChanges();             //}              //Admin for 'Default' tenant              //var adminUserForDefaultTenant = _context.Users.FirstOrDefault(u => u.TenantId == defaultTenant.Id && u.UserName == "admin");             //if (adminUserForDefaultTenant == null)             //{             //    adminUserForDefaultTenant = _context.Users.Add(             //        new User             //        {             //            TenantId = 1,             //            UserName = "admin",             //            Name = "System",             //            Surname = "Administrator",             //            EmailAddress = "admin@aspnetboilerplate.com",             //            IsEmailConfirmed = true,             //            Mobile = "13606806123",             //            IsMobileConfirmed = true,             //            Password = "AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==" //123qwe             //        });             //    _context.SaveChanges();              //    _context.UserRoles.Add(new UserRole(adminUserForDefaultTenant.Id, adminRoleForDefaultTenant.Id));             //    _context.SaveChanges();             //}              var adminRoleForHost = _context.Roles.FirstOrDefault(r => r.TenantId == null && r.Name == StaticRoleNames.Host.Admin);             if (adminRoleForHost == null)             {                 adminRoleForHost = _context.Roles.Add(new Role { Name = StaticRoleNames.Host.Admin, DisplayName = StaticRoleNames.Host.Admin, IsStatic = true });                 _context.SaveChanges();                  //Grant all tenant permissions                 var permissions = PermissionFinder                     .GetAllPermissions(new CMSAuthorizationProvider())                     .Where(p => p.MultiTenancySides.HasFlag(MultiTenancySides.Host))                     .ToList();                 // 获取CMSAuthorizationProvider定义的权限，授权给admin                 var taskPermissions = PermissionFinder.GetAllPermissions(new CMSAuthorizationProvider()).ToList();                 permissions.AddRange(taskPermissions);                  foreach (var permission in permissions)                 {                     _context.Permissions.Add(                         new RolePermissionSetting                         {                             Name = permission.Name,                             IsGranted = true,                             RoleId = adminRoleForHost.Id                         });                 }                  _context.SaveChanges();             }         }     } }